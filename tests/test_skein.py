import pytest
import codecs
import struct
from crysp.skein import *

# testing UBI configuration (see Skein specification document, Annex B):
def test_skein_001():
    IV_256_128 = struct.pack('<QQQQ',0xE1111906964D7260, 0x883DAAA77C8D811C, 0x10080DF491960F7A, 0xCCF7DDE5B45BC1C2)
    IV_256_160 = struct.pack('<QQQQ',0x1420231472825E98, 0x2AC4E9A25A77E590, 0xD47A58568838D63E, 0x2DD2E4968586AB7D)
    IV_256_256 = struct.pack('<QQQQ',0xFC9DA860D048B449, 0x2FCA66479FA7D833, 0xB33BC3896656840F, 0x6A54E920FDE8DA69)
    assert Skein(256,128)._initstate()==IV_256_128
    assert Skein(256,160)._initstate()==IV_256_160
    assert Skein(256,256)._initstate()==IV_256_256

# testing Skein hash function
# ---------------------------
# vectors from Skein specification document, Annex C:
vectors = [(256,256,
            "FF",
            "0B98DCD198EA0E50A7A244C444E25C23DA30C10FC9A1F270A6637F1F34E67ED2"),
           (256,256,
            "",
            "C8877087DA56E072870DAA843F176E9453115929094C3A40C463A196C29BF7BA"),
           (256,256,
            "FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0",
            "8D0FA4EF777FD759DFD4044E6F6A5AC3C774AEC943DCFC07927B723B5DBF408B"),
           (512,512,
            "FF",
            "71B7BCE6FE6452227B9CED6014249E5BF9A9754C3AD618CCC4E0AAE16B316CC8"
            "CA698D864307ED3E80B6EF1570812AC5272DC409B5A012DF2A579102F340617A"),
           (512,512,
            "FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0"
            "DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0",
            "45863BA3BE0C4DFC27E75D358496F4AC9A736A505D9313B42B2F5EADA79FC17F"
            "63861E947AFB1D056AA199575AD3F8C9A3CC1780B5E5FA4CAE050E989876625B"),
           (1024,1024,
            "FF",
            "E62C05802EA0152407CDD8787FDA9E35703DE862A4FBC119CFF8590AFE79250B"
            "CCC8B3FAF1BD2422AB5C0D263FB2F8AFB3F796F048000381531B6F00D85161BC"
            "0FFF4BEF2486B1EBCD3773FABF50AD4AD5639AF9040E3F29C6C931301BF79832"
            "E9DA09857E831E82EF8B4691C235656515D437D2BDA33BCEC001C67FFDE15BA8")
           ]

@pytest.mark.parametrize('Nb,No,m,h',vectors)
def test_skein_002(Nb,No,m,h):
    H = Skein(Nb,No)
    m,h = (codecs.decode(s,'hex') for s in (m,h))
    assert H(m)==h

# testing Skein hash function with non integral random input:
#------------------------------------------------------------
def test_skein_003():
    H = Skein(256,256)
    M='00'
    RESULT="52D2B5FFC2966C06BA7BB0CC2BABBC935E99146487FB361A239830D4D688C988"
    l=1
    m,h = (codecs.decode(s,'hex') for s in (M,RESULT))
    assert H(m,bitlen=l)==h

def test_skein_004():
    H = Skein(256,256)
    M='00'*33
    RESULT="3EAEA996FAD95B6032654D6CA93AC3450BED8C754CD8000460A2876E34E52FA7"
    l=257
    m,h = (codecs.decode(s,'hex') for s in (M,RESULT))
    assert H(m,bitlen=l)==h

# testing Skein MAC function:
# ---------------------------
vectors = [(256,256,"CB41F1706CDE09651203C2D0EFBADDF8",
            '',
            "886E4EFEFC15F06AA298963971D7A25398FFFE5681C84DB39BD00851F64AE29D"),
           (256,256,"CB41F1706CDE09651203C2D0EFBADDF847A0D315CB2E53FF8BAC41DA"
                    "0002672E920244C66E02D5F0DAD3E94C42BB65F0D14157DECF4105EF5609D5B0984457C193",
            "D3090C72167517F7C7AD82A70C2FD3F6443F608301591E598EADB195E8357135BA26FEDE2EE187417F816048D00FC235",
            "C353A316558EC34F8245DD2F9C2C4961FBC7DECC3B69053C103E4B8AAAF20394"),
          ]

@pytest.mark.parametrize('Nb,No,K,m,h',vectors)
def test_skein_005(Nb,No,K,m,h):
    K,m,h = (codecs.decode(s,'hex') for s in (K,m,h))
    H = Skein(Nb,No,key=K)
    assert H(m)==h

# testing Skein Tree Hash:
# ------------------------
def test_skein_006():
    H = Skein(256,256,Yl=2,Yf=2,Ym=2)
    M="000102010401060108010A010C010E01100112011401160118011A011C011E01"\
      "200122012401260128012A012C012E01300132013401360138013A013C013E01"\
      "400142014401460148014A014C014E01500152015401560158015A015C015E01"\
      "600162016401660168016A016C016E01700172017401760178017A017C01"
    RESULT="E3CF8FCDD20BFE85D175448007226C20FF22A65DC9DF7588BE305E5CCC3F4941"
    m,h = (codecs.decode(s,'hex') for s in (M,RESULT))
    assert H(m)==h


